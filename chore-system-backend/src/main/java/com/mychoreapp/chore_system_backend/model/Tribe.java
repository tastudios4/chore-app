package com.mychoreapp.chore_system_backend.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.PrePersist;
import jakarta.persistence.Table;
import lombok.Getter;
import lombok.Setter;
import lombok.NoArgsConstructor;
import lombok.ToString;

import java.util.UUID;

/**
 * Represents a Tribe (group of users/roommates) in the chore system.
 * This class is mapped to a database table named 'tribes'.
 * Chores and leaderboards will be associated with a specific Tribe.
 */
@Entity // Marks this class as a JPA entity
@Table(name = "tribes") // Explicitly maps this entity to a database table named 'tribes'
@Getter
@Setter
@NoArgsConstructor
@ToString
public class Tribe {

    @Id // Specifies the primary key
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Auto-generated ID
    private Long id; // Unique identifier for the tribe

    @Column(nullable = false, unique = true) // Tribe name cannot be null and must be unique
    private String name; // The name of the tribe

    @Column(nullable = false, unique = true) // Join code must be unique and cannot be null
    private String joinCode; // A unique, automatically generated code for users to join this tribe

    /**
     * Constructor for creating a new Tribe with a name.
     * The joinCode is automatically generated.
     * @param name The name of the tribe.
     */
    public Tribe(final String name) {
        this.name = name;
        // The joinCode will be generated by the @PrePersist method or directly here
        // For simplicity, let's generate it directly in the constructor for now.
        // In a real app, you might generate and validate uniqueness in the service layer.
        this.joinCode = generateUniqueJoinCode();
    }

    /**
     * JPA lifecycle callback method invoked before the entity is first persisted.
     * Ensures that a joinCode is generated if it's not already set.
     */
    @PrePersist
    public void generateJoinCodeIfNull() {
        if (this.joinCode == null || this.joinCode.isEmpty()) {
            this.joinCode = generateUniqueJoinCode();
        }
    }

    /**
     * Generates a simple unique join code using UUID.
     * In a real application, this would involve checking for uniqueness against the database
     * and handling potential collisions (e.g., in the service layer).
     * @return A unique 8-character string.
     */
    private String generateUniqueJoinCode() {
        return UUID.randomUUID().toString().substring(0, 8).toUpperCase();
    }
}