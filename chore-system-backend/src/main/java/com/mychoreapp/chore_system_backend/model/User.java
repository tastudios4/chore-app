package com.mychoreapp.chore_system_backend.model;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Column;
import jakarta.persistence.Table; // Import the Table annotation
import lombok.Getter; // Import Lombok annotations
import lombok.Setter;
import lombok.NoArgsConstructor; // For the default constructor
import lombok.ToString; // For toString() generation

/**
 * Represents a user in the chore system.
 * This class is mapped to a database table named 'users'.
 * It supports both traditional username/password authentication and Google SSO.
 */
@Entity // Marks this class as a JPA entity, meaning it corresponds to a database table
@Table(name = "users") // Explicitly maps this entity to a database table named 'users'
@Getter // Lombok will automatically generate all getter methods for the fields
@Setter // Lombok will automatically generate all setter methods for the fields
@NoArgsConstructor // Lombok will automatically generate the default no-argument constructor (required by JPA)
@ToString(exclude = "password") // Lombok will generate a toString() method, excluding the 'password' field for security
public class User {

    @Id // Specifies the primary key of the entity
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Configures the primary key to be auto-generated by the database
    private Long id; // Unique identifier for the user

    @Column(unique = true, nullable = true) // Maps this field to a column in the database table
    private String username; // User's unique username

    @Column(nullable = true) // password might become nullable if Google-only users don't have one
    private String password; // Still needs hashing for non-SSO users!

    @Column(unique = true, nullable = true) // Unique Google ID, nullable if not all users use Google
    private String googleId;

    @Column(unique = true, nullable = true) // Email from Google, also unique and nullable
    private String email;

    private String name; // User's full name from Google
    private String profilePictureUrl; // Optional: URL to Google profile picture

    // To distinguish authentication method
    @Column(nullable = false)
    private String authenticationType; // e.g., "BASIC", "GOOGLE"

    private int points;
    
    /**
     * Constructor for creating a new User object with traditional username/password.
     * This constructor is kept explicit to handle specific initialization logic (e.g., setting authenticationType).
     * @param username The unique username for the user.
     * @param password The user's password.
     */
    public User(final String username, 
                final String password) {
        this.username = username;
        this.password = password;
        this.points = 0; // New users start with 0 points
        this.authenticationType = "BASIC"; // Default to basic authentication
    }

    /**
     * Constructor for creating a new User object with Google SSO.
     * This constructor is kept explicit to handle specific initialization logic (e.g., setting authenticationType).
     * @param googleId The unique Google ID for the user.
     * @param email The user's email from Google.
     * @param name The user's full name from Google.
     * @param profilePictureUrl The URL to the user's Google profile picture.
     */
    public User(final String googleId, 
                final String email, 
                final String name, 
                final String profilePictureUrl) {
        this.googleId = googleId;
        this.email = email;
        this.name = name;
        this.profilePictureUrl = profilePictureUrl;
        this.points = 0; // New users start with 0 points
        this.authenticationType = "GOOGLE"; // Set authentication type to Google
    }

    /**
     * Adds points to the user's current total.
     * @param pointsToAdd The number of points to add.
     */
    public void addPoints(final int pointsToAdd) {
        if (pointsToAdd > 0) {
            this.points += pointsToAdd;
        }
    }
}